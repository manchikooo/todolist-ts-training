{"version":3,"sources":["reducers/TodolistsReducer.ts","components/EditableSpan.tsx","reducers/TasksReducer.ts","components/AddItemForm.tsx","Task.tsx","Todolist.tsx","TodolistsMemo.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx","components/AddItemFormStyle.module.css"],"names":["todolistId1","v1","todolistId2","initialState","todolistFilterAC","value","todolistId","type","payload","EditableSpan","React","memo","props","useState","editMode","setEditMode","title","setTitle","autoFocus","onBlur","changeTitle","onChange","e","currentTarget","onDoubleClick","id","isDone","AddItemForm","error","setError","addItem","trim","className","classes","AddFormStyle","TextField","size","label","addLabel","variant","onKeyPress","charCode","Icon","onClick","style","marginLeft","fontSize","color","Task","todolistID","task","console","log","dispatch","useDispatch","removeTask","useCallback","taskId","changeTaskStatus","event","checked","taskID","changeTaskStatusAC","onChangeTitleHandler","newItemTitle","newTitle","changeTaskNameAC","key","Checkbox","IconButton","Todolist","tasks","useSelector","state","tl","addTask","addTaskAC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","changeTodolistNameAC","map","ButtonGroup","Button","TodolistMap","todolists","todolist","Grid","item","Paper","elevation","padding","App","AppBar","position","Toolbar","edge","aria-label","sx","mr","Typography","component","flexGrow","Container","fixed","container","spacing","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copyTasks","f","s","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.ea351464.chunk.js","sourcesContent":["import {FilterValuesType, TodolistType} from \"../App\";\nimport {v1} from \"uuid\";\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistType> = [\n]\n\nexport const TodolistsReducer = (state = initialState , action: ActionType): Array<TodolistType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST': {\n            return state.filter(f => f.id !== action.payload.todolistId)\n        }\n        case 'ADD-TODOLIST': {\n            return [...state, {id: action.payload.todolistId, title: action.payload.title, filter: 'all'}]\n        }\n        case 'FILTER-TODOLIST': {\n            // let todolist = state.find(f => f.id === action.payload.todolistId)\n            // if (todolist) {\n            //     todolist.filter = action.payload.value\n            // }\n            // return [...state]\n            //  ВТОРОЙ ВАРИАНТ ТЕРНАРНИКОМ (find работает быстрее)\n            return state.map(t => t.id === action.payload.todolistId ? {...t, filter: action.payload.value} : t)\n        }\n        case 'CHANGE-TODOLIST-NAME': {\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        }\n        default:\n            return state\n    }\n};\n\ntype ActionType = removeTodolistACType | addTodolistACType | todolistFilterACType | changeTodolistNameACType\n\nexport type removeTodolistACType = ReturnType<typeof removeTodolistAC>\nexport type addTodolistACType = ReturnType<typeof addTodolistAC>\nexport type todolistFilterACType = ReturnType<typeof todolistFilterAC>\nexport type changeTodolistNameACType = ReturnType<typeof changeTodolistNameAC>\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        payload: {\n            todolistId: todolistId\n        }\n    } as const\n}\nexport const addTodolistAC = (title: string) => {\n    return {\n        type: 'ADD-TODOLIST',\n        payload: {\n            todolistId: v1(),\n            title: title\n        }\n    } as const\n}\nexport const todolistFilterAC = (value: FilterValuesType, todolistId: string) => {\n    return {\n        type: 'FILTER-TODOLIST',\n        payload: {\n            value: value,\n            todolistId: todolistId\n        }\n    } as const\n}\nexport const changeTodolistNameAC = (todolistID: string, newItemTitle: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-NAME',\n        payload: {\n            todolistId: todolistID,\n            title: newItemTitle\n        }\n    } as const\n}","import React, {useState} from 'react';\n\ntype PropsType = {\n    title: string\n    changeTitle: (newItemTitle: string) => void\n}\n\nconst EditableSpan = React.memo((props: PropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState(props.title)\n\n    const activateEditMode = () => setEditMode(true)\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeNewTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return (\n        editMode\n            ? <input value={title}\n                     autoFocus\n                     onBlur={activateViewMode}\n                     onChange={changeNewTitle}\n            />\n            : <span onDoubleClick={activateEditMode}>{title}</span>\n    );\n})\n\nexport default EditableSpan;","import {TasksStateType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {addTodolistACType, removeTodolistACType, todolistId1, todolistId2} from \"./TodolistsReducer\";\n\nconst initialState: TasksStateType = {\n    [todolistId1]: [\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\n        {id: v1(), title: \"JS\", isDone: true},\n        {id: v1(), title: \"REACT\", isDone: false}\n    ],\n    [todolistId2]: [\n        {id: v1(), title: \"Milk\", isDone: true},\n        {id: v1(), title: \"React Book\", isDone: true},\n        {id: v1(), title: \"Native JS\", isDone: false}\n    ]\n}\n\nexport const TasksReducer = (state = initialState, action: ActionType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            return {\n                ...state,\n                [action.payload.todolistID]: state[action.payload.todolistID].filter(task => task.id !== action.payload.id)\n            }\n        }\n        case 'ADD-TASK': {\n            return {\n                ...state,\n                [action.payload.todolistID]: [{\n                    id: v1(),\n                    title: action.payload.title,\n                    isDone: false\n                }, ...state[action.payload.todolistID]]\n            }\n        }\n        case 'ADD-TODOLIST': {\n            return {\n                ...state,\n                [action.payload.todolistId]: []\n            }\n        }\n        case 'REMOVE-TODOLIST': {\n            let copyTasks = {...state}\n            delete copyTasks[action.payload.todolistId]\n            return copyTasks\n        }\n        case 'CHANGE-TASK-STATUS': {\n            return {\n                ...state,\n                [action.payload.todolistID]: state[action.payload.todolistID].map(f => f.id === action.payload.taskId ? {\n                    ...f,\n                    isDone: action.payload.isDone\n                } : f)\n            }\n        }\n        case 'CHANGE-TASK-NAME': {\n            return {\n                ...state,\n                [action.payload.id]: state[action.payload.id].map(s => s.id === action.payload.taskID ? {\n                    ...s,\n                    title: action.payload.title\n                } : s)\n            }\n        }\n        default:\n            return state\n    }\n};\n\ntype ActionType =\n    removeTaskACType\n    | addTaskACType\n    | removeTodolistACType\n    | changeTaskStatusACType\n    | addTodolistACType\n    | changeTaskNameACType\n\nexport type removeTaskACType = ReturnType<typeof removeTaskAC>\nexport type addTaskACType = ReturnType<typeof addTaskAC>\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\nexport type changeTaskNameACType = ReturnType<typeof changeTaskNameAC>\n\nexport const removeTaskAC = (id: string, todolistId: string) => {\n    return {\n        type: 'REMOVE-TASK',\n        payload: {\n            id: id,\n            todolistID: todolistId\n        }\n    } as const\n}\n\nexport const addTaskAC = (title: string, todolistId: string) => {\n    return {\n        type: 'ADD-TASK',\n        payload: {\n            title: title,\n            todolistID: todolistId\n        }\n    } as const\n}\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistId: string) => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        payload: {\n            taskId: taskID,\n            isDone: isDone,\n            todolistID: todolistId\n        }\n    } as const\n}\nexport const changeTaskNameAC = (todolistID: string, taskID: string, newTitle: string) => {\n    return {\n        type: 'CHANGE-TASK-NAME',\n        payload: {\n            id: todolistID,\n            taskID: taskID,\n            title: newTitle\n        }\n    } as const\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport classes from './AddItemFormStyle.module.css'\nimport {Icon, TextField} from \"@mui/material\";\n\ntype PropsType = {\n    addItem: (newItemTitle: string) => void\n    addLabel: string\n}\n\nexport const AddItemForm = React.memo((props: PropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        let newTitle = title.trim();\n        if (newTitle !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    return (\n        <div className={classes.AddFormStyle}>\n\n            <TextField\n                size='small'\n                id=\"standard-basic\"\n                label={error ? \"Title is required\" : props.addLabel}\n                variant=\"standard\"\n                value={title}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={!!error}\n            />\n            <Icon onClick={addItem}\n                  style={{marginLeft: '10px', fontSize: 30}}\n                  color=\"primary\">add_circle\n            </Icon>\n        </div>\n    );\n})\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport EditableSpan from \"./components/EditableSpan\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {TaskType} from \"./Todolist\";\nimport {changeTaskNameAC, changeTaskStatusAC, removeTaskAC} from \"./reducers/TasksReducer\";\nimport {useDispatch} from \"react-redux\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    todolistID: string\n}\n\nexport const Task = React.memo(({todolistID, task}: TaskPropsType) => {\n\n    console.log('Task')\n\n    let dispatch = useDispatch()\n\n    const removeTask = useCallback((taskId: string) => {\n        dispatch(removeTaskAC(taskId, todolistID))\n    }, [todolistID, dispatch])\n    const changeTaskStatus = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        let isDone = event.currentTarget.checked\n        dispatch(changeTaskStatusAC(task.id, isDone, todolistID))\n    }, [task.id, todolistID, dispatch])\n    // const changeTaskName = useCallback((taskID: string, newTitle: string) => {\n    //     dispatch(changeTaskNameAC(todolistID, taskID, newTitle))\n    // }, [todolistID, dispatch])\n    const onChangeTitleHandler = useCallback((newItemTitle: string) => dispatch(changeTaskNameAC(todolistID, task.id, newItemTitle)), [dispatch, task.id, todolistID])\n\n\n    return (\n        <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\n            <Checkbox size={'small'}\n                      onChange={changeTaskStatus}\n                      checked={task.isDone}/>\n            <EditableSpan title={task.title} changeTitle={onChangeTitleHandler}/>\n\n            <IconButton onClick={() => removeTask(task.id)}>\n                <DeleteIcon/>\n            </IconButton>\n        </li>\n    )\n})\n\n\n","import React, {useCallback, useState} from 'react';\nimport {TasksStateType, TodolistType} from './App';\nimport EditableSpan from \"./components/EditableSpan\";\nimport classes from './components/AddItemFormStyle.module.css'\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {Button, ButtonGroup, Checkbox, IconButton} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootReducerType} from \"./store\";\nimport {addTaskAC, changeTaskNameAC, changeTaskStatusAC, removeTaskAC} from \"./reducers/TasksReducer\";\nimport {changeTodolistNameAC, removeTodolistAC, todolistFilterAC} from \"./reducers/TodolistsReducer\";\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport {Task} from \"./Task\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    tl: TodolistType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n\n    // console.log('todolist')\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    let tasks = useSelector<RootReducerType, Array<TaskType>>(state => state.tasks[props.tl.id])\n\n    let dispatch = useDispatch()\n\n    // const removeTask = (taskId: string) => {\n    //     dispatch(removeTaskAC(taskId, props.tl.id))\n    // };\n    // const changeTaskStatus = (id: string, isDone: boolean) => {\n    //     dispatch(changeTaskStatusAC(id, isDone, props.tl.id))\n    // };\n    // const changeTaskName = (taskID: string, newTitle: string) => {\n    //     dispatch(changeTaskNameAC(props.tl.id, taskID, newTitle))\n    // }\n\n    const addTask = useCallback(function (title: string) {\n        let newTitle = title.trim();\n        if (newTitle !== \"\") {\n            dispatch(addTaskAC(newTitle, props.tl.id))\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }, [dispatch, props.tl.id])\n\n    const changeTodolistNameCallback = (newItemTitle: string) => {\n        dispatch(changeTodolistNameAC(props.tl.id, newItemTitle))\n    }\n\n    const removeTodolist = () => dispatch(removeTodolistAC(props.tl.id))\n\n    const onAllClickHandler = useCallback(() => dispatch(todolistFilterAC(\"all\", props.tl.id)), [dispatch, props.tl.id])\n    const onActiveClickHandler = useCallback(() => dispatch(todolistFilterAC(\"active\", props.tl.id)), [dispatch, props.tl.id])\n    const onCompletedClickHandler = useCallback(() => dispatch(todolistFilterAC(\"completed\", props.tl.id)), [dispatch, props.tl.id])\n\n    // const onChangeTitleHandler = (newItemTitle: string, itemID: string) => changeTaskName(itemID, newItemTitle)\n\n    let tasksForTodolist = tasks;\n\n    if (props.tl.filter === \"active\") {\n        tasksForTodolist = tasks.filter(t => !t.isDone);\n    }\n    if (props.tl.filter === \"completed\") {\n        tasksForTodolist = tasks.filter(t => t.isDone);\n    }\n\n    return <div>\n        <h3><EditableSpan title={props.tl.title} changeTitle={changeTodolistNameCallback}/>\n            <IconButton onClick={removeTodolist}>\n                <DeleteIcon/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} addLabel={'Task name'}/>\n        <div className={classes.AddFormStyle}>\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n        <ul>\n            {\n                tasksForTodolist.map(t => {\n                    return <Task key={t.id} task={t} todolistID={props.tl.id}/>\n                })\n            }\n        </ul>\n        <div>\n            <ButtonGroup size={'small'} color={\"primary\"}>\n                <Button className={props.tl.filter === 'all' ? \"active-filter\" : \"\"}\n                        onClick={onAllClickHandler}>All\n                </Button>\n                <Button className={props.tl.filter === 'active' ? \"active-filter\" : \"\"}\n                        onClick={onActiveClickHandler}>Active\n                </Button>\n                <Button className={props.tl.filter === 'completed' ? \"active-filter\" : \"\"}\n                        onClick={onCompletedClickHandler}>Completed\n                </Button>\n            </ButtonGroup>\n        </div>\n    </div>\n})\n\n\n\n","import React from 'react';\nimport {Grid, Paper} from \"@mui/material\";\nimport {Todolist} from \"./Todolist\";\nimport {useSelector} from \"react-redux\";\nimport {RootReducerType} from \"./store\";\nimport {TodolistType} from \"./App\";\n\nconst TodolistsMemo = () => {\n\n    const todolists = useSelector<RootReducerType, Array<TodolistType>>(state => state.todolist)\n\n    return (\n        <>\n            {todolists.map(tl => <Grid item key={tl.id}>\n                    <Paper elevation={5} style={{padding: '10px'}}>\n                        <Todolist\n                            tl={tl}/>\n                    </Paper>\n                </Grid>\n            )}\n        </>\n    );\n};\n\nexport const TodolistMap = TodolistsMemo\n","import React from 'react';\nimport './App.css';\nimport {TaskType} from './Todolist';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {Container, Grid} from \"@mui/material\";\nimport {addTodolistAC} from \"./reducers/TodolistsReducer\";\nimport {useDispatch} from \"react-redux\";\nimport {TodolistMap} from \"./TodolistsMemo\";\nimport {AddItemForm} from \"./components/AddItemForm\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n    let dispatch = useDispatch()\n\n    const addTodolist = (newItemTitle: string) => {\n        dispatch(addTodolistAC(newItemTitle))\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{mr: 2}}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '10px 10px 30px 10px'}}>\n                    <AddItemForm addItem={addTodolist} addLabel={'Todolist name'}/>\n                </Grid>\n                <Grid container spacing={5}>\n                    {<TodolistMap/>}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {TasksReducer} from \"./reducers/TasksReducer\";\nimport {TodolistsReducer} from \"./reducers/TodolistsReducer\";\n\nlet rootReducer = combineReducers({\n    tasks: TasksReducer,\n    todolist: TodolistsReducer\n})\n\nexport type RootReducerType = ReturnType<typeof rootReducer>\n\nexport let store = createStore(rootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddFormStyle\":\"AddItemFormStyle_AddFormStyle__3IAY9\"};"],"sourceRoot":""}